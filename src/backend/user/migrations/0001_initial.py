<<<<<<< HEAD
# Generated by Django 4.2.6 on 2023-10-21 18:43
=======
# Generated by Django 4.2.6 on 2023-10-21 12:21
>>>>>>> develop

from django.conf import settings
import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import user.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
<<<<<<< HEAD
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(help_text='Максимум 150 символов.', max_length=150, unique=True, validators=[django.core.validators.RegexValidator(regex='^[a-zA-Z0-9]+$'), user.validators.username_validator], verbose_name='Логин')),
                ('password', models.CharField(help_text='Максимум 150 символов.', max_length=150, verbose_name='Пароль')),
                ('email', models.EmailField(help_text='Максимум 150 символов.', max_length=255, unique=True, verbose_name='Адрес электронной почты')),
                ('first_name', models.CharField(help_text='Максимум 150 символов.', max_length=150, validators=[django.core.validators.RegexValidator(regex='^[а-яА-ЯёЁa-zA-Z0-9]+$'), user.validators.username_validator], verbose_name='Имя')),
                ('last_name', models.CharField(help_text='Максимум 150 символов.', max_length=150, validators=[django.core.validators.RegexValidator(regex='^[а-яА-ЯёЁa-zA-Z0-9]+$'), user.validators.username_validator], verbose_name='Фамилия')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активирован')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
=======
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        verbose_name="date joined",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        help_text="Максимум 150 символов.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                regex="^[a-zA-Z0-9]+$"
                            ),
                            user.validators.username_validator,
                        ],
                        verbose_name="Логин",
                    ),
                ),
                (
                    "password",
                    models.CharField(
                        help_text="Максимум 150 символов.",
                        max_length=150,
                        verbose_name="Пароль",
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        help_text="Максимум 150 символов.",
                        max_length=255,
                        unique=True,
                        verbose_name="Адрес электронной почты",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        help_text="Максимум 150 символов.",
                        max_length=150,
                        validators=[
                            django.core.validators.RegexValidator(
                                regex="^[а-яА-ЯёЁa-zA-Z0-9]+$"
                            ),
                            user.validators.username_validator,
                        ],
                        verbose_name="Имя",
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        help_text="Максимум 150 символов.",
                        max_length=150,
                        validators=[
                            django.core.validators.RegexValidator(
                                regex="^[а-яА-ЯёЁa-zA-Z0-9]+$"
                            ),
                            user.validators.username_validator,
                        ],
                        verbose_name="Фамилия",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, verbose_name="Активирован"
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "Пользователь",
                "verbose_name_plural": "Пользователи",
>>>>>>> develop
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Candidate',
            fields=[
<<<<<<< HEAD
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('last_visit', models.DateTimeField(auto_now_add=True, verbose_name='Последнее время онлайна')),
            ],
            options={
                'verbose_name': 'Кандидат',
                'verbose_name_plural': 'Кандидаты',
                'ordering': ('username',),
=======
                (
                    "user_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                ("birthday", models.DateField(verbose_name="День рождения")),
                ("date_create", models.DateTimeField()),
            ],
            options={
                "verbose_name": "Кандидат",
                "verbose_name_plural": "Кандидаты",
>>>>>>> develop
            },
            bases=('user.user',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Employer',
            fields=[
<<<<<<< HEAD
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
=======
                (
                    "user_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                ("date_create", models.DateTimeField()),
>>>>>>> develop
            ],
            options={
                'verbose_name': 'Наниматель',
                'verbose_name_plural': 'Наниматели',
            },
            bases=('user.user',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
